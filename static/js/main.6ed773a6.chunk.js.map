{"version":3,"sources":["components/counter/Value.js","components/counter/ButtonControls.js","components/counter/Counter.js","redux/action.js","components/todo/FormTodo.js","components/todo/TaskListItem.js","components/todo/TodoList.js","components/todo/Todo.js","App.js","redux/store.js","index.js"],"names":["Value","value","ButtonControls","onIncrement","onDecrement","step","type","onClick","connect","state","counter","dispatch","payload","className","FormTodo","text","handleChange","e","setState","target","hadleSubmit","preventDefault","console","log","props","onAddText","resetForm","onSubmit","this","name","onChange","Component","TaskListItem","id","complited","onRemove","onUpdate","checked","TodoList","items","onDeleteTodo","onUpdateTodo","map","Todo","todos","addTodos","todo","shortid","generate","prevState","deleteTodo","todoId","filter","upDateTodo","length","App","initialState","user","store","createStore","action","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ed773a6.chunk.js","sourcesContent":["\r\n\r\nconst Value = ({value}) =>( \r\n    <span>{ value}</span>)\r\n\r\n\r\nexport default Value;\r\n","import React from 'react';\r\n\r\nconst ButtonControls = ({ onIncrement, onDecrement, step }) =>( \r\n    <div>\r\n        <button type=\"button\" onClick={onIncrement}>Добавить {step}</button>\r\n        <button type=\"button\" onClick={onDecrement}>Отнять {step}</button>\r\n    </div>)\r\n;\r\n\r\nexport default ButtonControls;","import React from 'react';\r\nimport { connect } from 'react-redux' // берем метод из реакт-редакс\r\n\r\nimport './counter.css'\r\n\r\nimport * as actions from '../../redux/action' //забираем все действия (action)\r\n\r\nimport Value from './Value';\r\nimport ButtonControls from './ButtonControls';\r\n\r\nconst Counter = ({ value, onIncrement, onDecrement, step }) => {\r\n\r\n    return (\r\n        <div className=\"Counter\">\r\n\r\n            <Value value={ value}/>\r\n            <ButtonControls\r\n                onIncrement={() => onIncrement(step)}\r\n                onDecrement={() => onDecrement(step)}\r\n                step={step} />\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nconst mapStateToProps = state => {// написали функцию получили объект state\r\n    return {\r\n        // возвращает объект, его свойства будут пропами компонента\r\n           value: state.counter.value,\r\n        step: state.counter.step\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    // возвращает объект с пропсами\r\n    return {\r\n        onIncrement: () => dispatch(actions.increment(1)), // вызвать функцию и передать знач.\r\n        onDecrement: () => dispatch(actions.decrement(1)) // вызвать функцию и передать знач.\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)","export const increment = value => ({\r\n    type: 'counter/Increment',\r\n    payload: value\r\n});\r\n\r\n\r\nexport const decrement = value => ({\r\n    type: 'counter/Decrement',\r\n    payload: value\r\n})","import React, { Component } from 'react';\r\n\r\nimport './todo.css'\r\n\r\nexport default class FormTodo extends Component {\r\n    state = {\r\n    \r\n       text: ''\r\n    }\r\n\r\n    handleChange = e => {\r\n      \r\n        this.setState({text: e.target.value})\r\n        \r\n    }\r\n \r\n    hadleSubmit = e => {\r\n        e.preventDefault();\r\n        console.log(this.state);\r\n        this.props.onAddText(this.state.text)\r\n        this.resetForm()\r\n    }\r\n    \r\n    resetForm = () => {\r\n        this.setState({text: ''})\r\n    }\r\n\r\n    render (){\r\n        return (\r\n              <form onSubmit={this.hadleSubmit} className=\"containerTodo\">\r\n                <textarea name=\"todo\" type=\"text\" value={this.state.text} onChange={ this.handleChange}/>\r\n                <button\r\n                    type=\"submit\"\r\n                className=\"butTodo\">Add todo</button>\r\n    </form>\r\n    \r\n        )\r\n    }\r\n  \r\n   }\r\n\r\n\r\n","\r\nimport React from 'react';\r\nimport './todo.css'\r\n\r\nconst TaskListItem = ({ text, id, complited, onRemove, onUpdate }) => (\r\n    <li className=\"todoItems\" key={id}>\r\n        <p>{text}</p>\r\n        <label>\r\n            <input type=\"checkbox\"\r\n                checked={complited} // Выбранный чекбокс\r\n                onChange={onUpdate} />\r\n            Complited\r\n        </label> \r\n        <section>\r\n            <button type=\"button\"\r\n                onClick={onRemove}>Delete todo</button>\r\n        </section>\r\n\r\n    </li>\r\n)\r\n\r\nexport default TaskListItem;","import React from 'react';\r\nimport './todo.css';\r\n\r\nimport TaskListItem from './TaskListItem'\r\n\r\nconst TodoList = ({ items, onDeleteTodo, onUpdateTodo }) =>( \r\n    <ul>\r\n\r\n        {items.map(({ text, id, complited }) => (\r\n            <TaskListItem key={id}\r\n                text={text}\r\n                complited={complited}\r\n                onRemove={() =>{ onDeleteTodo(id)}}\r\n                onUpdate={() => { onUpdateTodo(id) }}\r\n            \r\n            />\r\n        ))\r\n        \r\n        }\r\n    </ul>)\r\n\r\n\r\nexport default TodoList;","import { Component } from 'react';\r\nimport shortid from \"shortid\";\r\n\r\nimport FormTodo from './FormTodo';\r\nimport TodoList from './TodoList';\r\n\r\n\r\nexport default class Todo extends Component {\r\n    state = {       todos: []    }\r\n    \r\n    addTodos = text => {\r\n        const todo = {   id: shortid.generate(),\r\n            text: text,\r\n            complited: false        }\r\n        this.setState(prevState => {\r\n            return {\r\n                todos: [...prevState.todos, todo]\r\n            }     })    }\r\n    deleteTodo = todoId => {\r\n        this.setState(prevState => ({\r\n            todos: prevState.todos.filter(todo => todo.id !== todoId)\r\n        }))    }\r\n    upDateTodo = todoId => {\r\n        this.setState(prevState => {\r\n            return {\r\n                todos: prevState.todos.map(todo => {\r\n                    if (todo.id === todoId) {\r\n                        return { // в массив на место этого тодо вернем объект\r\n                            ...todo, // распылили старую заметку со свойствами\r\n                            complited: !todo.complited // изменили ему свойство на противоположное\r\n                        }\r\n                    }\r\n                    return todo;\r\n                    // если не совпал, то вернули старый таск\r\n                })       }   })     } \r\n\r\n    render() {        const {todos} = this.state\r\n        return (            <>\r\n                <FormTodo onAddText={this.addTodos} />\r\n                {todos.length > 0 && (<TodoList\r\n                    items={todos}\r\n                    onDeleteTodo={this.deleteTodo}\r\n                onUpdateTodo={this.upDateTodo}\r\n                />)}\r\n                \r\n     \r\n                </>\r\n        )\r\n    }\r\n}","import './App.css';\nimport Counter from './components/counter/Counter';\n\nimport Todo from './components/todo/Todo'\n\nfunction App() {\n  return (<>\n    <Counter />\n    <Todo />\n    </>\n  );\n}\n\nexport default App;\n\n\n","import { createStore} from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n\r\nconst initialState = {\r\n    counter:{ \r\n    value: 0,\r\n    step: 1\r\n    },\r\n    \r\n    user: {},\r\n    todos: {}\r\n}\r\n\r\nconst reduser = (state = initialState, action) => {\r\n     // action - можно деструктуризировать в начале\r\n\r\n\r\n    switch (action.type) {\r\n        case 'counter/Increment':\r\n            return {\r\n                ...state, // распылим, чтоб ничего не потерять\r\n                counter: {\r\n                    ...state.counter, // распылим сюда step, и изменим value \r\n                    value: state.counter.value + action.payload,\r\n                }\r\n            }\r\n        case 'counter/Decrement':\r\n            return {\r\n                 ...state, // распылим весь предыд. стейт, сохраним то что не относится к каунтеру\r\n                counter: {\r\n                    ...state.counter, // распылим, что б сохранить \"шаг\"\r\n                    value: state.counter.value - action.payload\r\n                }\r\n            }\r\n        default: return state\r\n    }\r\n\r\n};\r\n\r\nconst store = createStore(reduser, composeWithDevTools());\r\nexport default store;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n       <App />\n    </Provider>\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}