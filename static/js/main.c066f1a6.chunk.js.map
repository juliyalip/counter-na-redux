{"version":3,"sources":["components/counter/Value.js","components/counter/ButtonControls.js","components/counter/Counter.js","redux/action.js","App.js","redux/store.js","index.js"],"names":["Value","value","ButtonControls","onIncrement","onDecrement","step","type","onClick","connect","state","counter","dispatch","payload","className","App","initialState","user","todos","store","createStore","action","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAMeA,EAJD,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACV,+BAAQA,KCMGC,EAPQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,YAAaC,EAA7B,EAA6BA,KAA7B,OACnB,gCACI,yBAAQC,KAAK,SAASC,QAASJ,EAA/B,8DAAsDE,KACtD,yBAAQC,KAAK,SAASC,QAASH,EAA/B,kDAAoDC,SCsC7CG,eAlBS,SAAAC,GACpB,MAAO,CAEAR,MAAOQ,EAAMC,QAAQT,MACxBI,KAAMI,EAAMC,QAAQL,SAKD,SAAAM,GAEvB,MAAO,CACHR,YAAa,kBAAMQ,ECrCQ,CAC/BL,KAAM,oBACNM,QDmCkD,KAC9CR,YAAa,kBAAMO,EChCQ,CAC/BL,KAAM,oBACNM,QD8BkD,QAKvCJ,EAjCC,SAAC,GAA+C,IAA7CP,EAA4C,EAA5CA,MAAOE,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KAEhD,OACI,sBAAKQ,UAAU,UAAf,UAEI,cAAC,EAAD,CAAOZ,MAAQA,IACf,cAAC,EAAD,CACIE,YAAa,kBAAMA,EAAYE,IAC/BD,YAAa,kBAAMA,EAAYC,IAC/BA,KAAMA,UEVPS,MANf,WACE,OACF,cAAC,EAAD,K,sBCDMC,EAAe,CACjBL,QAAQ,CACRT,MAAO,EACPI,KAAM,GAGNW,KAAM,GACNC,MAAO,IA8BIC,EADDC,uBA1BE,WAAmC,IAAlCV,EAAiC,uDAAzBM,EAAcK,EAAW,uCAI9C,OAAQA,EAAOd,MACX,IAAK,oBACD,OAAO,2BACAG,GADP,IAEIC,QAAQ,2BACDD,EAAMC,SADN,IAEHT,MAAOQ,EAAMC,QAAQT,MAAQmB,EAAOR,YAGhD,IAAK,oBACD,OAAO,2BACCH,GADR,IAEIC,QAAQ,2BACDD,EAAMC,SADN,IAEHT,MAAOQ,EAAMC,QAAQT,MAAQmB,EAAOR,YAGhD,QAAS,OAAOH,KAKWY,iCC9BnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACG,cAAC,EAAD,QAILO,SAASC,eAAe,W","file":"static/js/main.c066f1a6.chunk.js","sourcesContent":["\r\n\r\nconst Value = ({value}) =>( \r\n    <span>{ value}</span>)\r\n\r\n\r\nexport default Value;\r\n","import React from 'react';\r\n\r\nconst ButtonControls = ({ onIncrement, onDecrement, step }) =>( \r\n    <div>\r\n        <button type=\"button\" onClick={onIncrement}>Добавить {step}</button>\r\n        <button type=\"button\" onClick={onDecrement}>Отнять {step}</button>\r\n    </div>)\r\n;\r\n\r\nexport default ButtonControls;","import React from 'react';\r\nimport { connect } from 'react-redux' // берем метод из реакт-редакс\r\n\r\nimport './counter.css'\r\n\r\nimport * as actions from '../../redux/action' //забираем все действия (action)\r\n\r\nimport Value from './Value';\r\nimport ButtonControls from './ButtonControls';\r\n\r\nconst Counter = ({ value, onIncrement, onDecrement, step }) => {\r\n\r\n    return (\r\n        <div className=\"Counter\">\r\n\r\n            <Value value={ value}/>\r\n            <ButtonControls\r\n                onIncrement={() => onIncrement(step)}\r\n                onDecrement={() => onDecrement(step)}\r\n                step={step} />\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nconst mapStateToProps = state => {// написали функцию получили объект state\r\n    return {\r\n        // возвращает объект, его свойства будут пропами компонента\r\n           value: state.counter.value,\r\n        step: state.counter.step\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    // возвращает объект с пропсами\r\n    return {\r\n        onIncrement: () => dispatch(actions.increment(1)), // вызвать функцию и передать знач.\r\n        onDecrement: () => dispatch(actions.decrement(1)) // вызвать функцию и передать знач.\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)","export const increment = value => ({\r\n    type: 'counter/Increment',\r\n    payload: value\r\n});\r\n\r\n\r\nexport const decrement = value => ({\r\n    type: 'counter/Decrement',\r\n    payload: value\r\n})","import './App.css';\nimport Counter from './components/counter/Counter'\n\nfunction App() {\n  return (\n<Counter />\n  );\n}\n\nexport default App;\n","import { createStore} from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n\r\nconst initialState = {\r\n    counter:{ \r\n    value: 0,\r\n    step: 1\r\n    },\r\n    \r\n    user: {},\r\n    todos: {}\r\n}\r\n\r\nconst reduser = (state = initialState, action) => {\r\n     // action - можно деструктуризировать в начале\r\n\r\n\r\n    switch (action.type) {\r\n        case 'counter/Increment':\r\n            return {\r\n                ...state, // распылим, чтоб ничего не потерять\r\n                counter: {\r\n                    ...state.counter, // распылим сюда step, и изменим value \r\n                    value: state.counter.value + action.payload,\r\n                }\r\n            }\r\n        case 'counter/Decrement':\r\n            return {\r\n                 ...state, // распылим весь предыд. стейт, сохраним то что не относится к каунтеру\r\n                counter: {\r\n                    ...state.counter, // распылим, что б сохранить \"шаг\"\r\n                    value: state.counter.value - action.payload\r\n                }\r\n            }\r\n        default: return state\r\n    }\r\n\r\n};\r\n\r\nconst store = createStore(reduser, composeWithDevTools());\r\nexport default store;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n       <App />\n    </Provider>\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}